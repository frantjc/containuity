// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package step

import (
	context "context"
	types "github.com/frantjc/sequence/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StepClient is the client API for Step service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StepClient interface {
	RunStep(ctx context.Context, in *RunStepRequest, opts ...grpc.CallOption) (Step_RunStepClient, error)
}

type stepClient struct {
	cc grpc.ClientConnInterface
}

func NewStepClient(cc grpc.ClientConnInterface) StepClient {
	return &stepClient{cc}
}

func (c *stepClient) RunStep(ctx context.Context, in *RunStepRequest, opts ...grpc.CallOption) (Step_RunStepClient, error) {
	stream, err := c.cc.NewStream(ctx, &Step_ServiceDesc.Streams[0], "/sequence.v1.step.Step/RunStep", opts...)
	if err != nil {
		return nil, err
	}
	x := &stepRunStepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Step_RunStepClient interface {
	Recv() (*types.Log, error)
	grpc.ClientStream
}

type stepRunStepClient struct {
	grpc.ClientStream
}

func (x *stepRunStepClient) Recv() (*types.Log, error) {
	m := new(types.Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StepServer is the server API for Step service.
// All implementations must embed UnimplementedStepServer
// for forward compatibility
type StepServer interface {
	RunStep(*RunStepRequest, Step_RunStepServer) error
	mustEmbedUnimplementedStepServer()
}

// UnimplementedStepServer must be embedded to have forward compatible implementations.
type UnimplementedStepServer struct {
}

func (UnimplementedStepServer) RunStep(*RunStepRequest, Step_RunStepServer) error {
	return status.Errorf(codes.Unimplemented, "method RunStep not implemented")
}
func (UnimplementedStepServer) mustEmbedUnimplementedStepServer() {}

// UnsafeStepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StepServer will
// result in compilation errors.
type UnsafeStepServer interface {
	mustEmbedUnimplementedStepServer()
}

func RegisterStepServer(s grpc.ServiceRegistrar, srv StepServer) {
	s.RegisterService(&Step_ServiceDesc, srv)
}

func _Step_RunStep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunStepRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StepServer).RunStep(m, &stepRunStepServer{stream})
}

type Step_RunStepServer interface {
	Send(*types.Log) error
	grpc.ServerStream
}

type stepRunStepServer struct {
	grpc.ServerStream
}

func (x *stepRunStepServer) Send(m *types.Log) error {
	return x.ServerStream.SendMsg(m)
}

// Step_ServiceDesc is the grpc.ServiceDesc for Step service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Step_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequence.v1.step.Step",
	HandlerType: (*StepServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunStep",
			Handler:       _Step_RunStep_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/step/step.proto",
}
