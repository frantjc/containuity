// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workflow

import (
	context "context"
	types "github.com/frantjc/sequence/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	RunWorkflow(ctx context.Context, in *RunWorkflowRequest, opts ...grpc.CallOption) (Workflow_RunWorkflowClient, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) RunWorkflow(ctx context.Context, in *RunWorkflowRequest, opts ...grpc.CallOption) (Workflow_RunWorkflowClient, error) {
	stream, err := c.cc.NewStream(ctx, &Workflow_ServiceDesc.Streams[0], "/sequence.v1.workflow.Workflow/RunWorkflow", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowRunWorkflowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Workflow_RunWorkflowClient interface {
	Recv() (*types.Log, error)
	grpc.ClientStream
}

type workflowRunWorkflowClient struct {
	grpc.ClientStream
}

func (x *workflowRunWorkflowClient) Recv() (*types.Log, error) {
	m := new(types.Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations must embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	RunWorkflow(*RunWorkflowRequest, Workflow_RunWorkflowServer) error
	mustEmbedUnimplementedWorkflowServer()
}

// UnimplementedWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) RunWorkflow(*RunWorkflowRequest, Workflow_RunWorkflowServer) error {
	return status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedWorkflowServer) mustEmbedUnimplementedWorkflowServer() {}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&Workflow_ServiceDesc, srv)
}

func _Workflow_RunWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunWorkflowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowServer).RunWorkflow(m, &workflowRunWorkflowServer{stream})
}

type Workflow_RunWorkflowServer interface {
	Send(*types.Log) error
	grpc.ServerStream
}

type workflowRunWorkflowServer struct {
	grpc.ServerStream
}

func (x *workflowRunWorkflowServer) Send(m *types.Log) error {
	return x.ServerStream.SendMsg(m)
}

// Workflow_ServiceDesc is the grpc.ServiceDesc for Workflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequence.v1.workflow.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunWorkflow",
			Handler:       _Workflow_RunWorkflow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/workflow/workflow.proto",
}
