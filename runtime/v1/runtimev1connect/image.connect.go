// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runtime/v1/image.proto

package runtimev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/frantjc/sequence/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ImageServiceName is the fully-qualified name of the ImageService service.
	ImageServiceName = "runtime.v1.ImageService"
)

// ImageServiceClient is a client for the runtime.v1.ImageService service.
type ImageServiceClient interface {
	PullImage(context.Context, *connect_go.Request[v1.PullImageRequest]) (*connect_go.Response[v1.PullImageResponse], error)
	PruneImages(context.Context, *connect_go.Request[v1.PruneImagesRequest]) (*connect_go.Response[v1.PruneImagesResponse], error)
}

// NewImageServiceClient constructs a client for the runtime.v1.ImageService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &imageServiceClient{
		pullImage: connect_go.NewClient[v1.PullImageRequest, v1.PullImageResponse](
			httpClient,
			baseURL+"/runtime.v1.ImageService/PullImage",
			opts...,
		),
		pruneImages: connect_go.NewClient[v1.PruneImagesRequest, v1.PruneImagesResponse](
			httpClient,
			baseURL+"/runtime.v1.ImageService/PruneImages",
			opts...,
		),
	}
}

// imageServiceClient implements ImageServiceClient.
type imageServiceClient struct {
	pullImage   *connect_go.Client[v1.PullImageRequest, v1.PullImageResponse]
	pruneImages *connect_go.Client[v1.PruneImagesRequest, v1.PruneImagesResponse]
}

// PullImage calls runtime.v1.ImageService.PullImage.
func (c *imageServiceClient) PullImage(ctx context.Context, req *connect_go.Request[v1.PullImageRequest]) (*connect_go.Response[v1.PullImageResponse], error) {
	return c.pullImage.CallUnary(ctx, req)
}

// PruneImages calls runtime.v1.ImageService.PruneImages.
func (c *imageServiceClient) PruneImages(ctx context.Context, req *connect_go.Request[v1.PruneImagesRequest]) (*connect_go.Response[v1.PruneImagesResponse], error) {
	return c.pruneImages.CallUnary(ctx, req)
}

// ImageServiceHandler is an implementation of the runtime.v1.ImageService service.
type ImageServiceHandler interface {
	PullImage(context.Context, *connect_go.Request[v1.PullImageRequest]) (*connect_go.Response[v1.PullImageResponse], error)
	PruneImages(context.Context, *connect_go.Request[v1.PruneImagesRequest]) (*connect_go.Response[v1.PruneImagesResponse], error)
}

// NewImageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImageServiceHandler(svc ImageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/runtime.v1.ImageService/PullImage", connect_go.NewUnaryHandler(
		"/runtime.v1.ImageService/PullImage",
		svc.PullImage,
		opts...,
	))
	mux.Handle("/runtime.v1.ImageService/PruneImages", connect_go.NewUnaryHandler(
		"/runtime.v1.ImageService/PruneImages",
		svc.PruneImages,
		opts...,
	))
	return "/runtime.v1.ImageService/", mux
}

// UnimplementedImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImageServiceHandler struct{}

func (UnimplementedImageServiceHandler) PullImage(context.Context, *connect_go.Request[v1.PullImageRequest]) (*connect_go.Response[v1.PullImageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runtime.v1.ImageService.PullImage is not implemented"))
}

func (UnimplementedImageServiceHandler) PruneImages(context.Context, *connect_go.Request[v1.PruneImagesRequest]) (*connect_go.Response[v1.PruneImagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runtime.v1.ImageService.PruneImages is not implemented"))
}
