// Code generated by protoc-gen-sqnc. DO NOT EDIT.
//
// Source: runtime/sqnc/runtime.proto

package sqnc

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RuntimeServiceName is the fully-qualified name of the RuntimeService service.
	RuntimeServiceName = "sequence.runtime.sqnc.RuntimeService"
)

// RuntimeServiceClient is a client for the sequence.runtime.sqnc.RuntimeService service.
type RuntimeServiceClient interface {
	CreateContainer(context.Context, *connect_go.Request[CreateContainerRequest]) (*connect_go.Response[CreateContainerResponse], error)
	GetContainer(context.Context, *connect_go.Request[GetContainerRequest]) (*connect_go.Response[GetContainerResponse], error)
	ExecContainer(context.Context, *connect_go.Request[ExecContainerRequest]) (*connect_go.ServerStreamForClient[ExecContainerResponse], error)
	StartContainer(context.Context, *connect_go.Request[StartContainerRequest]) (*connect_go.Response[StartContainerResponse], error)
	AttachContainer(context.Context, *connect_go.Request[AttachContainerRequest]) (*connect_go.ServerStreamForClient[AttachContainerResponse], error)
	StopContainer(context.Context, *connect_go.Request[StopContainerRequest]) (*connect_go.Response[StopContainerResponse], error)
	RemoveContainer(context.Context, *connect_go.Request[RemoveContainerRequest]) (*connect_go.Response[RemoveContainerResponse], error)
	PruneContainers(context.Context, *connect_go.Request[PruneContainersRequest]) (*connect_go.Response[PruneContainersResponse], error)
	CopyToContainer(context.Context, *connect_go.Request[CopyToContainerRequest]) (*connect_go.Response[CopyToContainerResponse], error)
	CopyFromContainer(context.Context, *connect_go.Request[CopyFromContainerRequest]) (*connect_go.Response[CopyFromContainerResponse], error)
	PullImage(context.Context, *connect_go.Request[PullImageRequest]) (*connect_go.Response[PullImageResponse], error)
	PruneImages(context.Context, *connect_go.Request[PruneImagesRequest]) (*connect_go.Response[PruneImagesResponse], error)
	CreateVolume(context.Context, *connect_go.Request[CreateVolumeRequest]) (*connect_go.Response[CreateVolumeResponse], error)
	GetVolume(context.Context, *connect_go.Request[GetVolumeRequest]) (*connect_go.Response[GetVolumeResponse], error)
	RemoveVolume(context.Context, *connect_go.Request[RemoveVolumeRequest]) (*connect_go.Response[RemoveVolumeResponse], error)
	PruneVolumes(context.Context, *connect_go.Request[PruneVolumesRequest]) (*connect_go.Response[PruneVolumesResponse], error)
}

// NewRuntimeServiceClient constructs a client for the sequence.runtime.sqnc.RuntimeService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRuntimeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RuntimeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runtimeServiceClient{
		createContainer: connect_go.NewClient[CreateContainerRequest, CreateContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/CreateContainer",
			opts...,
		),
		getContainer: connect_go.NewClient[GetContainerRequest, GetContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/GetContainer",
			opts...,
		),
		execContainer: connect_go.NewClient[ExecContainerRequest, ExecContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/ExecContainer",
			opts...,
		),
		startContainer: connect_go.NewClient[StartContainerRequest, StartContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/StartContainer",
			opts...,
		),
		attachContainer: connect_go.NewClient[AttachContainerRequest, AttachContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/AttachContainer",
			opts...,
		),
		stopContainer: connect_go.NewClient[StopContainerRequest, StopContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/StopContainer",
			opts...,
		),
		removeContainer: connect_go.NewClient[RemoveContainerRequest, RemoveContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/RemoveContainer",
			opts...,
		),
		pruneContainers: connect_go.NewClient[PruneContainersRequest, PruneContainersResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/PruneContainers",
			opts...,
		),
		copyToContainer: connect_go.NewClient[CopyToContainerRequest, CopyToContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/CopyToContainer",
			opts...,
		),
		copyFromContainer: connect_go.NewClient[CopyFromContainerRequest, CopyFromContainerResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/CopyFromContainer",
			opts...,
		),
		pullImage: connect_go.NewClient[PullImageRequest, PullImageResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/PullImage",
			opts...,
		),
		pruneImages: connect_go.NewClient[PruneImagesRequest, PruneImagesResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/PruneImages",
			opts...,
		),
		createVolume: connect_go.NewClient[CreateVolumeRequest, CreateVolumeResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/CreateVolume",
			opts...,
		),
		getVolume: connect_go.NewClient[GetVolumeRequest, GetVolumeResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/GetVolume",
			opts...,
		),
		removeVolume: connect_go.NewClient[RemoveVolumeRequest, RemoveVolumeResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/RemoveVolume",
			opts...,
		),
		pruneVolumes: connect_go.NewClient[PruneVolumesRequest, PruneVolumesResponse](
			httpClient,
			baseURL+"/sequence.runtime.sqnc.RuntimeService/PruneVolumes",
			opts...,
		),
	}
}

// runtimeServiceClient implements RuntimeServiceClient.
type runtimeServiceClient struct {
	createContainer   *connect_go.Client[CreateContainerRequest, CreateContainerResponse]
	getContainer      *connect_go.Client[GetContainerRequest, GetContainerResponse]
	execContainer     *connect_go.Client[ExecContainerRequest, ExecContainerResponse]
	startContainer    *connect_go.Client[StartContainerRequest, StartContainerResponse]
	attachContainer   *connect_go.Client[AttachContainerRequest, AttachContainerResponse]
	stopContainer     *connect_go.Client[StopContainerRequest, StopContainerResponse]
	removeContainer   *connect_go.Client[RemoveContainerRequest, RemoveContainerResponse]
	pruneContainers   *connect_go.Client[PruneContainersRequest, PruneContainersResponse]
	copyToContainer   *connect_go.Client[CopyToContainerRequest, CopyToContainerResponse]
	copyFromContainer *connect_go.Client[CopyFromContainerRequest, CopyFromContainerResponse]
	pullImage         *connect_go.Client[PullImageRequest, PullImageResponse]
	pruneImages       *connect_go.Client[PruneImagesRequest, PruneImagesResponse]
	createVolume      *connect_go.Client[CreateVolumeRequest, CreateVolumeResponse]
	getVolume         *connect_go.Client[GetVolumeRequest, GetVolumeResponse]
	removeVolume      *connect_go.Client[RemoveVolumeRequest, RemoveVolumeResponse]
	pruneVolumes      *connect_go.Client[PruneVolumesRequest, PruneVolumesResponse]
}

// CreateContainer calls sequence.runtime.sqnc.RuntimeService.CreateContainer.
func (c *runtimeServiceClient) CreateContainer(ctx context.Context, req *connect_go.Request[CreateContainerRequest]) (*connect_go.Response[CreateContainerResponse], error) {
	return c.createContainer.CallUnary(ctx, req)
}

// GetContainer calls sequence.runtime.sqnc.RuntimeService.GetContainer.
func (c *runtimeServiceClient) GetContainer(ctx context.Context, req *connect_go.Request[GetContainerRequest]) (*connect_go.Response[GetContainerResponse], error) {
	return c.getContainer.CallUnary(ctx, req)
}

// ExecContainer calls sequence.runtime.sqnc.RuntimeService.ExecContainer.
func (c *runtimeServiceClient) ExecContainer(ctx context.Context, req *connect_go.Request[ExecContainerRequest]) (*connect_go.ServerStreamForClient[ExecContainerResponse], error) {
	return c.execContainer.CallServerStream(ctx, req)
}

// StartContainer calls sequence.runtime.sqnc.RuntimeService.StartContainer.
func (c *runtimeServiceClient) StartContainer(ctx context.Context, req *connect_go.Request[StartContainerRequest]) (*connect_go.Response[StartContainerResponse], error) {
	return c.startContainer.CallUnary(ctx, req)
}

// AttachContainer calls sequence.runtime.sqnc.RuntimeService.AttachContainer.
func (c *runtimeServiceClient) AttachContainer(ctx context.Context, req *connect_go.Request[AttachContainerRequest]) (*connect_go.ServerStreamForClient[AttachContainerResponse], error) {
	return c.attachContainer.CallServerStream(ctx, req)
}

// StopContainer calls sequence.runtime.sqnc.RuntimeService.StopContainer.
func (c *runtimeServiceClient) StopContainer(ctx context.Context, req *connect_go.Request[StopContainerRequest]) (*connect_go.Response[StopContainerResponse], error) {
	return c.stopContainer.CallUnary(ctx, req)
}

// RemoveContainer calls sequence.runtime.sqnc.RuntimeService.RemoveContainer.
func (c *runtimeServiceClient) RemoveContainer(ctx context.Context, req *connect_go.Request[RemoveContainerRequest]) (*connect_go.Response[RemoveContainerResponse], error) {
	return c.removeContainer.CallUnary(ctx, req)
}

// PruneContainers calls sequence.runtime.sqnc.RuntimeService.PruneContainers.
func (c *runtimeServiceClient) PruneContainers(ctx context.Context, req *connect_go.Request[PruneContainersRequest]) (*connect_go.Response[PruneContainersResponse], error) {
	return c.pruneContainers.CallUnary(ctx, req)
}

// CopyToContainer calls sequence.runtime.sqnc.RuntimeService.CopyToContainer.
func (c *runtimeServiceClient) CopyToContainer(ctx context.Context, req *connect_go.Request[CopyToContainerRequest]) (*connect_go.Response[CopyToContainerResponse], error) {
	return c.copyToContainer.CallUnary(ctx, req)
}

// CopyFromContainer calls sequence.runtime.sqnc.RuntimeService.CopyFromContainer.
func (c *runtimeServiceClient) CopyFromContainer(ctx context.Context, req *connect_go.Request[CopyFromContainerRequest]) (*connect_go.Response[CopyFromContainerResponse], error) {
	return c.copyFromContainer.CallUnary(ctx, req)
}

// PullImage calls sequence.runtime.sqnc.RuntimeService.PullImage.
func (c *runtimeServiceClient) PullImage(ctx context.Context, req *connect_go.Request[PullImageRequest]) (*connect_go.Response[PullImageResponse], error) {
	return c.pullImage.CallUnary(ctx, req)
}

// PruneImages calls sequence.runtime.sqnc.RuntimeService.PruneImages.
func (c *runtimeServiceClient) PruneImages(ctx context.Context, req *connect_go.Request[PruneImagesRequest]) (*connect_go.Response[PruneImagesResponse], error) {
	return c.pruneImages.CallUnary(ctx, req)
}

// CreateVolume calls sequence.runtime.sqnc.RuntimeService.CreateVolume.
func (c *runtimeServiceClient) CreateVolume(ctx context.Context, req *connect_go.Request[CreateVolumeRequest]) (*connect_go.Response[CreateVolumeResponse], error) {
	return c.createVolume.CallUnary(ctx, req)
}

// GetVolume calls sequence.runtime.sqnc.RuntimeService.GetVolume.
func (c *runtimeServiceClient) GetVolume(ctx context.Context, req *connect_go.Request[GetVolumeRequest]) (*connect_go.Response[GetVolumeResponse], error) {
	return c.getVolume.CallUnary(ctx, req)
}

// RemoveVolume calls sequence.runtime.sqnc.RuntimeService.RemoveVolume.
func (c *runtimeServiceClient) RemoveVolume(ctx context.Context, req *connect_go.Request[RemoveVolumeRequest]) (*connect_go.Response[RemoveVolumeResponse], error) {
	return c.removeVolume.CallUnary(ctx, req)
}

// PruneVolumes calls sequence.runtime.sqnc.RuntimeService.PruneVolumes.
func (c *runtimeServiceClient) PruneVolumes(ctx context.Context, req *connect_go.Request[PruneVolumesRequest]) (*connect_go.Response[PruneVolumesResponse], error) {
	return c.pruneVolumes.CallUnary(ctx, req)
}

// RuntimeServiceHandler is an implementation of the sequence.runtime.sqnc.RuntimeService service.
type RuntimeServiceHandler interface {
	CreateContainer(context.Context, *connect_go.Request[CreateContainerRequest]) (*connect_go.Response[CreateContainerResponse], error)
	GetContainer(context.Context, *connect_go.Request[GetContainerRequest]) (*connect_go.Response[GetContainerResponse], error)
	ExecContainer(context.Context, *connect_go.Request[ExecContainerRequest], *connect_go.ServerStream[ExecContainerResponse]) error
	StartContainer(context.Context, *connect_go.Request[StartContainerRequest]) (*connect_go.Response[StartContainerResponse], error)
	AttachContainer(context.Context, *connect_go.Request[AttachContainerRequest], *connect_go.ServerStream[AttachContainerResponse]) error
	StopContainer(context.Context, *connect_go.Request[StopContainerRequest]) (*connect_go.Response[StopContainerResponse], error)
	RemoveContainer(context.Context, *connect_go.Request[RemoveContainerRequest]) (*connect_go.Response[RemoveContainerResponse], error)
	PruneContainers(context.Context, *connect_go.Request[PruneContainersRequest]) (*connect_go.Response[PruneContainersResponse], error)
	CopyToContainer(context.Context, *connect_go.Request[CopyToContainerRequest]) (*connect_go.Response[CopyToContainerResponse], error)
	CopyFromContainer(context.Context, *connect_go.Request[CopyFromContainerRequest]) (*connect_go.Response[CopyFromContainerResponse], error)
	PullImage(context.Context, *connect_go.Request[PullImageRequest]) (*connect_go.Response[PullImageResponse], error)
	PruneImages(context.Context, *connect_go.Request[PruneImagesRequest]) (*connect_go.Response[PruneImagesResponse], error)
	CreateVolume(context.Context, *connect_go.Request[CreateVolumeRequest]) (*connect_go.Response[CreateVolumeResponse], error)
	GetVolume(context.Context, *connect_go.Request[GetVolumeRequest]) (*connect_go.Response[GetVolumeResponse], error)
	RemoveVolume(context.Context, *connect_go.Request[RemoveVolumeRequest]) (*connect_go.Response[RemoveVolumeResponse], error)
	PruneVolumes(context.Context, *connect_go.Request[PruneVolumesRequest]) (*connect_go.Response[PruneVolumesResponse], error)
}

// NewRuntimeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRuntimeServiceHandler(svc RuntimeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/CreateContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/CreateContainer",
		svc.CreateContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/GetContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/GetContainer",
		svc.GetContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/ExecContainer", connect_go.NewServerStreamHandler(
		"/sequence.runtime.sqnc.RuntimeService/ExecContainer",
		svc.ExecContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/StartContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/StartContainer",
		svc.StartContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/AttachContainer", connect_go.NewServerStreamHandler(
		"/sequence.runtime.sqnc.RuntimeService/AttachContainer",
		svc.AttachContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/StopContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/StopContainer",
		svc.StopContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/RemoveContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/RemoveContainer",
		svc.RemoveContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/PruneContainers", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/PruneContainers",
		svc.PruneContainers,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/CopyToContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/CopyToContainer",
		svc.CopyToContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/CopyFromContainer", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/CopyFromContainer",
		svc.CopyFromContainer,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/PullImage", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/PullImage",
		svc.PullImage,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/PruneImages", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/PruneImages",
		svc.PruneImages,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/CreateVolume", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/CreateVolume",
		svc.CreateVolume,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/GetVolume", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/GetVolume",
		svc.GetVolume,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/RemoveVolume", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/RemoveVolume",
		svc.RemoveVolume,
		opts...,
	))
	mux.Handle("/sequence.runtime.sqnc.RuntimeService/PruneVolumes", connect_go.NewUnaryHandler(
		"/sequence.runtime.sqnc.RuntimeService/PruneVolumes",
		svc.PruneVolumes,
		opts...,
	))
	return "/sequence.runtime.sqnc.RuntimeService/", mux
}

// UnimplementedRuntimeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRuntimeServiceHandler struct{}

func (UnimplementedRuntimeServiceHandler) CreateContainer(context.Context, *connect_go.Request[CreateContainerRequest]) (*connect_go.Response[CreateContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.CreateContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetContainer(context.Context, *connect_go.Request[GetContainerRequest]) (*connect_go.Response[GetContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.GetContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ExecContainer(context.Context, *connect_go.Request[ExecContainerRequest], *connect_go.ServerStream[ExecContainerResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.ExecContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) StartContainer(context.Context, *connect_go.Request[StartContainerRequest]) (*connect_go.Response[StartContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.StartContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) AttachContainer(context.Context, *connect_go.Request[AttachContainerRequest], *connect_go.ServerStream[AttachContainerResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.AttachContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) StopContainer(context.Context, *connect_go.Request[StopContainerRequest]) (*connect_go.Response[StopContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.StopContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) RemoveContainer(context.Context, *connect_go.Request[RemoveContainerRequest]) (*connect_go.Response[RemoveContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.RemoveContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) PruneContainers(context.Context, *connect_go.Request[PruneContainersRequest]) (*connect_go.Response[PruneContainersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.PruneContainers is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) CopyToContainer(context.Context, *connect_go.Request[CopyToContainerRequest]) (*connect_go.Response[CopyToContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.CopyToContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) CopyFromContainer(context.Context, *connect_go.Request[CopyFromContainerRequest]) (*connect_go.Response[CopyFromContainerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.CopyFromContainer is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) PullImage(context.Context, *connect_go.Request[PullImageRequest]) (*connect_go.Response[PullImageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.PullImage is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) PruneImages(context.Context, *connect_go.Request[PruneImagesRequest]) (*connect_go.Response[PruneImagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.PruneImages is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) CreateVolume(context.Context, *connect_go.Request[CreateVolumeRequest]) (*connect_go.Response[CreateVolumeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.CreateVolume is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetVolume(context.Context, *connect_go.Request[GetVolumeRequest]) (*connect_go.Response[GetVolumeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.GetVolume is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) RemoveVolume(context.Context, *connect_go.Request[RemoveVolumeRequest]) (*connect_go.Response[RemoveVolumeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.RemoveVolume is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) PruneVolumes(context.Context, *connect_go.Request[PruneVolumesRequest]) (*connect_go.Response[PruneVolumesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sequence.runtime.sqnc.RuntimeService.PruneVolumes is not implemented"))
}
